{"version":3,"sources":["Header.js","SummaryTrio.js","CountryTrio.js","Graph.js","Dropdown.js","Top16Countries.js","MainApp.js","Footer.js","index.js"],"names":["Header","state","className","Component","SummaryTrio","props","globalStats","data","this","TotalConfirmed","NewConfirmed","TotalRecovered","NewRecovered","TotalDeaths","NewDeaths","CountryTrio","country","continent","population","language","prevProps","setState","src","CountryCode","alt","Country","toFixed","Graph","countryProv","givenCountry","isLoaded","graphData","getCountryCaseStats","bind","prevState","undefined","fetch","Slug","then","res","json","resJSON","timeStamps","map","i","Date","parse","toString","slice","confirmedCases","Confirmed","activeCases","Active","recoveredCases","Recovered","deceasedCases","Deaths","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","pointRadius","height","options","legend","fontColor","fontFamily","title","display","text","charAt","toUpperCase","fontSize","scales","yAxes","type","ticks","min","max","callback","value","index","values","Dropdown","countryList","subregion","selectedCountry","handleCountryChange","sort","a","b","event","target","filter","region","languages","name","onChange","key","Top16Countries","top16Countries","detectedCountry","calcTop16Countries","orderedCountries","MainApp","globalSummary","SUMMARY_URL","error","fetchGlobalSummary","locationFailed","setLocation","status","Error","statusText","Global","Countries","window","navigator","geolocation","getCurrentPosition","catch","err","position","coords","latitude","longitude","code","results","components","country_code","slug","message","Footer","href","Main","React","ReactDOM","render","document","getElementById"],"mappings":"gMAoBeA,G,wDAjBb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,GAFD,E,qDAMZ,OACE,yBAAKC,UAAU,cACb,wBAAIA,UAAU,gBAAd,kBACA,wBAAIA,UAAU,iBAAd,uB,GAVaC,c,OC0CNC,E,kDAzCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDJ,MAAQ,CACXK,YAAaD,EAAME,MAHJ,E,qDAQjB,OACE,yBAAKL,UAAU,gBACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,WAAb,aACA,uBAAGA,UAAU,SAASM,KAAKP,MAAMK,YAAYG,gBAC7C,uBAAGP,UAAU,OACX,0BAAMA,UAAU,QAAhB,SACCM,KAAKP,MAAMK,YAAYI,eAG5B,yBAAKR,UAAU,aACb,uBAAGA,UAAU,WAAb,aACA,uBAAGA,UAAU,SAASM,KAAKP,MAAMK,YAAYK,gBAC7C,uBAAGT,UAAU,OACX,0BAAMA,UAAU,QAAhB,SACCM,KAAKP,MAAMK,YAAYM,eAG5B,yBAAKV,UAAU,YACb,uBAAGA,UAAU,WAAb,YACA,uBAAGA,UAAU,SAASM,KAAKP,MAAMK,YAAYO,aAC7C,uBAAGX,UAAU,OACX,0BAAMA,UAAU,QAAhB,SACCM,KAAKP,MAAMK,YAAYQ,iB,GAhCVX,aCsFXY,E,kDArFb,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IACDJ,MAAQ,CACXe,QAASX,EAAMW,QACfC,UAAWZ,EAAMY,UACjBC,WAAYb,EAAMa,WAClBC,SAAUd,EAAMc,UAND,E,+DAWAC,GACbA,EAAUJ,UAAYR,KAAKH,MAAMW,SACnCR,KAAKa,SAAS,CACZL,QAASR,KAAKH,MAAMW,QACpBC,UAAWT,KAAKH,MAAMY,UACtBC,WAAYV,KAAKH,MAAMa,WACvBC,SAAUX,KAAKH,MAAMc,a,+BAOzB,OACE,yBAAKjB,UAAU,gBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,mBACb,yBACEoB,IACE,+BACAd,KAAKP,MAAMe,QAAQO,YACnB,eAEFC,IAAKhB,KAAKP,MAAMe,QAAQS,WAK5B,uBAAGvB,UAAU,QAAQM,KAAKP,MAAMe,QAAQS,SACxC,uBAAGvB,UAAU,aAAaM,KAAKP,MAAMgB,WACrC,uBAAGf,UAAU,YAAb,aAAmCM,KAAKP,MAAMkB,UAC9C,uBAAGjB,UAAU,cAAb,eAAuCM,KAAKP,MAAMiB,YAClD,uBAAGhB,UAAU,YAAb,uBACuB,KAElBM,KAAKP,MAAMe,QAAQP,eAAiBD,KAAKP,MAAMiB,WAChD,KACAQ,QAAQ,GALZ,MASF,yBAAKxB,UAAU,0BACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,WAAb,aACA,uBAAGA,UAAU,SAASM,KAAKP,MAAMe,QAAQP,gBACzC,uBAAGP,UAAU,OACX,0BAAMA,UAAU,QAAhB,SACCM,KAAKP,MAAMe,QAAQN,eAGxB,yBAAKR,UAAU,aACb,uBAAGA,UAAU,WAAb,aACA,uBAAGA,UAAU,SAASM,KAAKP,MAAMe,QAAQL,gBACzC,uBAAGT,UAAU,OACX,0BAAMA,UAAU,QAAhB,SACCM,KAAKP,MAAMe,QAAQJ,eAGxB,yBAAKV,UAAU,YACb,uBAAGA,UAAU,WAAb,YACA,uBAAGA,UAAU,SAASM,KAAKP,MAAMe,QAAQH,aACzC,uBAAGX,UAAU,OACX,0BAAMA,UAAU,QAAhB,SACCM,KAAKP,MAAMe,QAAQF,kB,GA3ERX,a,QCyMXwB,E,kDArMb,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IACDJ,MAAQ,CACX2B,YAAavB,EAAMoB,QAEnBI,aAAcxB,EAAMwB,aAEpBC,UAAU,EAEVC,UAAW,IAGb,EAAKC,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAZV,E,gEAiBjBzB,KAAKwB,wB,yCAIYZ,EAAWc,GACxBA,EAAUL,eAAiBrB,KAAKH,MAAMwB,eAExCrB,KAAKa,SAAS,CACZQ,aAAcrB,KAAKH,MAAMwB,aAEzBC,UAAU,EAEVC,UAAW,GAEXH,iBAAaO,IAGf3B,KAAKwB,yB,4CAKc,IAAD,OACpBI,MAAM,6CAAD,YAE0BD,IAA3B3B,KAAKP,MAAM2B,YACPpB,KAAKP,MAAM4B,aAAaQ,KACxB7B,KAAKP,MAAM2B,cAKhBU,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,IAAMC,EAAaD,EAAQE,KAAI,SAACC,GAE9B,OADY,IAAIC,KAAKA,KAAKC,MAAMF,EAAEC,OAAOE,WAC5BC,MAAM,EAAG,OAOlBC,EAAiBR,EAAQE,KAAI,SAACC,GAClC,OAAOA,EAAEM,aAGLC,EAAcV,EAAQE,KAAI,SAACC,GAC/B,OAAOA,EAAEQ,UAGLC,EAAiBZ,EAAQE,KAAI,SAACC,GAClC,OAAOA,EAAEU,aAGLC,EAAgBd,EAAQE,KAAI,SAACC,GACjC,OAAOA,EAAEY,UAGX,EAAKnC,SAAS,CACZS,UAAU,EAEVC,UAAW,CACT0B,OAAQf,EAERgB,SAAU,CACR,CACEC,MAAM,kBACNC,MAAM,EACNC,YAAa,EACbC,gBAAiB,GACjBC,YAAa,QACbC,YAAa,IACbzD,KAAM0C,EACNgB,YAAa,GAEf,CACEN,MAAM,eACNC,MAAM,EACNC,YAAa,EACbC,gBAAiB,GACjBC,YAAa,SACbC,YAAa,EACbzD,KAAM4C,EACNc,YAAa,GAEf,CACEN,MAAM,kBACNC,MAAM,EACNC,YAAa,EACbC,gBAAiB,GACjBC,YAAa,QACbC,YAAa,EACbzD,KAAM8C,EACNY,YAAa,GAEf,CACEN,MAAM,iBACNC,MAAM,EACNC,YAAa,EACbC,gBAAiB,GACjBC,YAAa,MACbC,YAAa,EACbzD,KAAMgD,EACNU,YAAa,Y,+BAYzB,OAA4B,IAAxBzD,KAAKP,MAAM6B,SAEX,yBAAK5B,UAAU,mBACb,wCAKF,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CACEgE,OAAQ,IACR3D,KAAMC,KAAKP,MAAM8B,UACjBoC,QAAS,CACPC,OAAQ,CACNX,OAAQ,CACNY,UAAW,UACXC,WAAY,cAGhBC,MAAO,CACLC,SAAS,EACTF,WAAY,YACZG,KAAK,YAAD,YACyBtC,IAA3B3B,KAAKP,MAAM2B,YACPpB,KAAKP,MAAM4B,aAAaJ,QACxBjB,KAAKP,MAAM2B,YAAY8C,OAAO,GAAGC,cACjCnE,KAAKP,MAAM2B,YAAYoB,MAAM,IAGnCqB,UAAW,UAEXO,SAAU,IAEZC,OAAQ,CACNC,MAAO,CACL,CACEC,KAAM,cACNC,MAAO,CACLC,IAAK,EACLC,IAAK,IACLC,SAAU,SAAUC,EAAOC,EAAOC,GAChC,OAAc,MAAVF,EAA0B,KAChB,MAAVA,EAAyB,OACf,MAAVA,EAAwB,MACd,MAAVA,EAAuB,KACb,MAAVA,EAAsB,MACZ,KAAVA,EAAqB,KACX,IAAVA,EAAoB,IACjB,kB,GAtLXjF,aCuHLoF,E,kDAtHb,WAAYlF,GAAQ,IAAD,8BACjB,cAAMA,IACDJ,MAAQ,CACXuF,YAAanF,EAAME,KAEnBU,UAAW,KAEXC,WAAY,KAEZuE,UAAW,KAEXtE,SAAU,KAEVuE,gBAAiB,MAGnB,EAAKC,oBAAsB,EAAKA,oBAAoB1D,KAAzB,gBAhBV,E,iEAqBjBzB,KAAKP,MAAMuF,YAAYI,MAAK,SAACC,EAAGC,GAC9B,OAAID,EAAEpE,QAAUqE,EAAErE,QACT,GACM,O,0CAWCsE,GAAQ,IAAD,OACjBX,EAAUW,EAAMC,OAAhBZ,MAGR,GAAc,cAAVA,EAEF5E,KAAKa,SAAS,CACZJ,UAAW,KACXC,WAAY,KACZuE,UAAW,KACXC,gBAAiB,KACjBvE,SAAU,WAEP,CAIL,IAAIuE,EAAkBlF,KAAKP,MAAMuF,YAAYS,QAAO,SAACjF,GACnD,GAAIA,EAAQqB,OAAS+C,EACnB,OAAOpE,KAGX0E,EAAkBA,EAAgB,GAElCtD,MAAM,0CAAD,OACuCsD,EAAgBnE,cAEzDe,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAEL,EAAKpB,SAAS,CACZJ,UAAWwB,EAAQyD,OACnBhF,WAAYuB,EAAQvB,WACpBuE,UAAWhD,EAAQgD,UACnBtE,SAAUsB,EAAQ0D,UAAU,GAAGC,KAC/BV,gBAAiBA,U,+BAOjB,IAAD,OACP,OACE,yBAAKxF,UAAU,gBACb,4BACEA,UAAU,mBACVmG,SAAU,SAACN,GAAD,OAAW,EAAKJ,oBAAoBI,KAE9C,4BAAQX,MAAM,aAAd,kBAEC5E,KAAKP,MAAMuF,YAAY7C,KAAI,SAAC3B,GAAD,OAC1B,4BAAQsF,IAAKtF,EAAQO,YAAa6D,MAAOpE,EAAQqB,MAC9CrB,EAAQS,aAKgB,MAA9BjB,KAAKP,MAAMyF,gBACV,yBAAKxF,UAAU,wBACb,kBAAC,EAAD,CACEc,QAASR,KAAKP,MAAMyF,gBACpBzE,UAAWT,KAAKP,MAAMgB,UACtBC,WAAYV,KAAKP,MAAMiB,WACvBuE,UAAWjF,KAAKP,MAAMwF,UACtBtE,SAAUX,KAAKP,MAAMkB,WAGvB,kBAAC,EAAD,CAAOU,aAAcrB,KAAKP,MAAMyF,mBAGhC,KACJ,4BACiC,MAA9BlF,KAAKP,MAAMyF,gBACR,sCACA,S,GA/GSvF,aCqIRoG,E,kDAjIb,WAAYlG,GAAQ,IAAD,8BACjB,cAAMA,IACDJ,MAAQ,CACXuF,YAAanF,EAAME,KAEnBiG,eAAgB,KAEhBC,gBAAiBpG,EAAMW,SAGzB,EAAK0F,mBAAqB,EAAKA,mBAAmBzE,KAAxB,gBAVT,E,gEAejBzB,KAAKkG,uB,2CAKL,IAAIC,EAAmBnG,KAAKP,MAAMuF,YAElCmB,EAAiBf,MAAK,SAACC,EAAGC,GACxB,OAAID,EAAEpF,eAAiBqF,EAAErF,gBACf,EACI,KAGhB,IAAM+F,EAAiBG,EAAiB3D,MAAM,EAAG,IAEjDwD,EAAe7D,KAAI,SAAC3B,GAClB,OAAQA,EAAQS,SACd,IAAK,4BACHT,EAAQS,QAAU,OAClB,MACF,IAAK,2BACHT,EAAQS,QAAU,MAClB,MACF,IAAK,gCACHT,EAAQS,QAAU,eAClB,MACF,IAAK,yBACHT,EAAQS,QAAU,YAClB,MACF,IAAK,4BACHT,EAAQS,QAAU,SAClB,MACF,IAAK,+BACHT,EAAQS,QAAU,WAClB,MACF,IAAK,kCACHT,EAAQS,QAAU,YAGtB,OAAOT,KAMTR,KAAKP,MAAMuF,YAAY7C,KAAI,SAAC3B,GAC1B,OAAQA,EAAQS,SACd,IAAK,4BACHT,EAAQS,QAAU,OAClB,MACF,IAAK,2BACHT,EAAQS,QAAU,MAClB,MACF,IAAK,gCACHT,EAAQS,QAAU,eAClB,MACF,IAAK,yBACHT,EAAQS,QAAU,YAClB,MACF,IAAK,4BACHT,EAAQS,QAAU,SAClB,MACF,IAAK,+BACHT,EAAQS,QAAU,WAClB,MACF,IAAK,kCACHT,EAAQS,QAAU,YAGtB,OAAOT,KAMTR,KAAKa,SAAS,CACZmF,eAAgBA,M,+BAKV,IAAD,OACP,OAAiC,MAA7BhG,KAAKP,MAAMuG,eACN,8CAIL,yBAAKtG,UAAU,yBACb,sDACCM,KAAKP,MAAMuG,eAAe7D,KAAI,SAAC3B,GAC9B,OACE,wBAAIsF,IAAKtF,EAAQS,SACf,6BACE,0BAAMvB,UAAU,gBACb,EAAKD,MAAMwG,kBAAoBzF,EAAQqB,KAAvC,iBAAuD,GACvDrB,EAAQS,SAEX,0BAAMvB,UAAU,cACb,EAAKD,MAAMwG,kBAAoBzF,EAAQqB,KAAvC,kBAAwD,GACxDrB,EAAQP,eAFX,oB,GAjHWN,aC4IdyG,E,kDA7Ib,aAAe,IAAD,8BACZ,gBACK3G,MAAQ,CACX4G,cAAe,KAEfC,YAAa,qCAEbtB,YAAa,KAEb1D,UAAU,EAEViF,MAAO,KAEPnF,YAAa,IAGf,EAAKoF,mBAAqB,EAAKA,mBAAmB/E,KAAxB,gBAC1B,EAAKgF,eAAiB,EAAKA,eAAehF,KAApB,gBACtB,EAAKiF,YAAc,EAAKA,YAAYjF,KAAjB,gBAlBP,E,gEAuBZzB,KAAKwG,uB,2CAIe,IAAD,OACnB5E,MAAM5B,KAAKP,MAAM6G,aACdxE,MAAK,SAACC,GACL,GAAIA,EAAI4E,QAAU,KAAO5E,EAAI4E,QAAU,IACrC,OAAO5E,EAAIC,OAEX,MAAM4E,MAAM7E,EAAI8E,eAInB/E,MAAK,SAACG,GACL,EAAKpB,SAAS,CACZwF,cAAepE,EAAQ6E,OACvB9B,YAAa/C,EAAQ8E,YAGvBC,OAAOC,UAAUC,YAAYC,mBAC3B,EAAKT,YACL,EAAKD,mBAIRW,OAAM,SAACC,GACN,EAAKxG,SAAS,CACZ0F,MAAOc,S,kCAMHC,GAAW,IAAD,SACYA,EAASC,OAAjCC,EADY,EACZA,SAAUC,EADE,EACFA,UAElB7F,MAAM,uFAAD,OACoF4F,EADpF,eACmGC,EADnG,+BAIF3F,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACL,IAAM2F,EAAO3F,EAAI4F,QAAQ,GAAGC,WAAWC,aAAa1D,cAE9C2D,EAAO,EAAKrI,MAAMuF,YAAYS,QAAO,SAACjF,GAC1C,GAAIA,EAAQO,cAAgB2G,EAC1B,OAAOlH,EAAQqB,QAKnB,EAAKhB,SAAS,CACZO,YAAa0G,EAAK,GAAGjG,KAGrBP,UAAU,S,uCAOhBtB,KAAKa,SAAS,CACZO,YAAa,QACbE,UAAU,M,+BAQZ,OAAKtB,KAAKP,MAAM6B,SAeZ,yBAAK5B,UAAU,cACb,0CACc,IACXM,KAAKP,MAAM2B,YAAY8C,OAAO,GAAGC,cAChCnE,KAAKP,MAAM2B,YAAYoB,MAAM,GAHjC,KAOA,yBAAK9C,UAAU,kBACb,kBAAC,EAAD,CAAaK,KAAMC,KAAKP,MAAM4G,gBAG9B,kBAAC,EAAD,CAAOpF,QAASjB,KAAKP,MAAM2B,eAI7B,kBAAC,EAAD,CACErB,KAAMC,KAAKP,MAAMuF,YACjBxE,QAASR,KAAKP,MAAM2B,cAKtB,kBAAC,EAAD,CAAUrB,KAAMC,KAAKP,MAAMuF,eApC7B,yBAAKtF,UAAU,cACb,4BACuB,MAApBM,KAAKP,MAAM8G,MAAX,uBACSvG,KAAKP,MAAM8G,MAAMwB,QAD1B,oBAEG,gB,GAvGMpI,aCiBPqI,E,kDApBb,aAAe,IAAD,8BACZ,gBACKvI,MAAQ,GAFD,E,qDAMZ,OACE,yBAAKC,UAAU,UACb,uBAAGA,UAAU,iBACX,uBAAGuI,KAAK,2DAAR,0B,GAVWtI,aCQfuI,E,kDACJ,aAAe,IAAD,8BACZ,gBACKzI,MAAQ,GAFD,E,qDAKZ,OACE,yBAAKC,UAAU,kBACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,W,GAZWyI,IAAMxI,WAmBzByI,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,U","file":"static/js/main.5876918f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"top-header\">\r\n        <h1 className=\"main-heading\">COVID-19 Stats</h1>\r\n        <h4 className=\"main-subtitle\">Realtime Stats</h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//self explainatory header component\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass SummaryTrio extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      globalStats: props.data,\r\n    };\r\n    //only needs the globalStats\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"summary-trio\">\r\n        <div className=\"confirmed\">\r\n          <p className=\"heading\">Confirmed</p>\r\n          <p className=\"total\">{this.state.globalStats.TotalConfirmed}</p>\r\n          <p className=\"new\">\r\n            <span className=\"plus\">TODAY</span>\r\n            {this.state.globalStats.NewConfirmed}\r\n          </p>\r\n        </div>\r\n        <div className=\"recovered\">\r\n          <p className=\"heading\">Recovered</p>\r\n          <p className=\"total\">{this.state.globalStats.TotalRecovered}</p>\r\n          <p className=\"new\">\r\n            <span className=\"plus\">TODAY</span>\r\n            {this.state.globalStats.NewRecovered}\r\n          </p>\r\n        </div>\r\n        <div className=\"deceased\">\r\n          <p className=\"heading\">Deceased</p>\r\n          <p className=\"total\">{this.state.globalStats.TotalDeaths}</p>\r\n          <p className=\"new\">\r\n            <span className=\"plus\">TODAY</span>\r\n            {this.state.globalStats.NewDeaths}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//it just takes in the data from the globalStats state passed from the parent component\r\n\r\nexport default SummaryTrio;\r\n","import React, { Component } from \"react\";\r\n\r\nclass CountryTrio extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      country: props.country,\r\n      continent: props.continent,\r\n      population: props.population,\r\n      language: props.language,\r\n      //just states for the props passed down\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.country !== this.props.country) {\r\n      this.setState({\r\n        country: this.props.country,\r\n        continent: this.props.continent,\r\n        population: this.props.population,\r\n        language: this.props.language,\r\n      });\r\n      //if the selected country is changed, the data is updated with the updated props\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"country-trio\">\r\n        <div className=\"country-details\">\r\n          <div className=\"image-container\">\r\n            <img\r\n              src={\r\n                \"https://www.countryflags.io/\" +\r\n                this.state.country.CountryCode +\r\n                \"/flat/64.png\"\r\n              }\r\n              alt={this.state.country.Country}\r\n              // here the img of the given country's flag is set\r\n              // pretty nifty\r\n            />\r\n          </div>\r\n          <p className=\"name\">{this.state.country.Country}</p>\r\n          <p className=\"continent\">{this.state.continent}</p>\r\n          <p className=\"language\">Language: {this.state.language}</p>\r\n          <p className=\"population\">Population: {this.state.population}</p>\r\n          <p className=\"affected\">\r\n            Affected Population:{\" \"}\r\n            {(\r\n              (this.state.country.TotalConfirmed / this.state.population) *\r\n              100\r\n            ).toFixed(3)}\r\n            %\r\n          </p>\r\n        </div>\r\n        <div className=\"country-specific-stats\">\r\n          <div className=\"confirmed\">\r\n            <p className=\"heading\">Confirmed</p>\r\n            <p className=\"total\">{this.state.country.TotalConfirmed}</p>\r\n            <p className=\"new\">\r\n              <span className=\"plus\">TODAY</span>\r\n              {this.state.country.NewConfirmed}\r\n            </p>\r\n          </div>\r\n          <div className=\"recovered\">\r\n            <p className=\"heading\">Recovered</p>\r\n            <p className=\"total\">{this.state.country.TotalRecovered}</p>\r\n            <p className=\"new\">\r\n              <span className=\"plus\">TODAY</span>\r\n              {this.state.country.NewRecovered}\r\n            </p>\r\n          </div>\r\n          <div className=\"deceased\">\r\n            <p className=\"heading\">Deceased</p>\r\n            <p className=\"total\">{this.state.country.TotalDeaths}</p>\r\n            <p className=\"new\">\r\n              <span className=\"plus\">TODAY</span>\r\n              {this.state.country.NewDeaths}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//this is similar to the global stats thing, but this one displays more information and is specified to the country\r\n\r\nexport default CountryTrio;\r\n","import React, { Component } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n//this uses the chartjs module\r\n//it's cool\r\n\r\nclass Graph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      countryProv: props.Country,\r\n      //this is the country given from the current user location\r\n      givenCountry: props.givenCountry,\r\n      //this is the country given from the dropdown\r\n      isLoaded: false,\r\n      //state for data status\r\n      graphData: {},\r\n    };\r\n\r\n    this.getCountryCaseStats = this.getCountryCaseStats.bind(this);\r\n    //just binding the function\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getCountryCaseStats();\r\n  }\r\n  //once the component is mounted, get the cases for the country set\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.givenCountry !== this.props.givenCountry) {\r\n      //if the country prop is changed for the dropdown given country, then this code block runs\r\n      this.setState({\r\n        givenCountry: this.props.givenCountry,\r\n        //the new dropdown country is set here\r\n        isLoaded: false,\r\n        //the loaded status is falsified, because the graph data is changed\r\n        graphData: {},\r\n        //graph data is set to empty\r\n        countryProv: undefined,\r\n        //the countryProv from the user location is set to undefined\r\n      });\r\n      this.getCountryCaseStats();\r\n      //fetch the country details for the new selected country\r\n    }\r\n  }\r\n\r\n  getCountryCaseStats() {\r\n    fetch(\r\n      `https://api.covid19api.com/dayone/country/${\r\n        this.state.countryProv === undefined\r\n          ? this.state.givenCountry.Slug\r\n          : this.state.countryProv\r\n      }`\r\n    )\r\n      //here it checks if the given country is the located country or the dropdown country,\r\n      //and then fetches the json for the defined country\r\n      .then((res) => res.json())\r\n      .then((resJSON) => {\r\n        const timeStamps = resJSON.map((i) => {\r\n          let iDate = new Date(Date.parse(i.Date)).toString();\r\n          return iDate.slice(4, 10);\r\n        });\r\n        //timestamps are taken from the country's data,\r\n        //its converted to Date object, then stringified,\r\n        //the stringified date is sent to the array,\r\n        //the array date elements are in the form of month_date,\r\n        //so to do this, the date string is just sliced\r\n        const confirmedCases = resJSON.map((i) => {\r\n          return i.Confirmed;\r\n        });\r\n        //confirmed cases are just mapped on to an array\r\n        const activeCases = resJSON.map((i) => {\r\n          return i.Active;\r\n        });\r\n        //acitve cases are just mapped on to an array\r\n        const recoveredCases = resJSON.map((i) => {\r\n          return i.Recovered;\r\n        });\r\n        //recovered cases are just mapped on to an array\r\n        const deceasedCases = resJSON.map((i) => {\r\n          return i.Deaths;\r\n        });\r\n        //deceased cases are just mapped on to an array\r\n        this.setState({\r\n          isLoaded: true,\r\n          //after all the data is retrieved from the json, the loading state is set to true\r\n          graphData: {\r\n            labels: timeStamps,\r\n            //the x axis labels\r\n            datasets: [\r\n              {\r\n                label: `Confirmed Cases`,\r\n                fill: false,\r\n                lineTension: 1,\r\n                backgroundColor: \"\",\r\n                borderColor: \"white\",\r\n                borderWidth: 3.5,\r\n                data: confirmedCases,\r\n                pointRadius: 0,\r\n              },\r\n              {\r\n                label: `Active Cases`,\r\n                fill: false,\r\n                lineTension: 1,\r\n                backgroundColor: \"\",\r\n                borderColor: \"yellow\",\r\n                borderWidth: 2,\r\n                data: activeCases,\r\n                pointRadius: 0,\r\n              },\r\n              {\r\n                label: `Recovered Cases`,\r\n                fill: false,\r\n                lineTension: 1,\r\n                backgroundColor: \"\",\r\n                borderColor: \"green\",\r\n                borderWidth: 2,\r\n                data: recoveredCases,\r\n                pointRadius: 0,\r\n              },\r\n              {\r\n                label: `Deceased Cases`,\r\n                fill: false,\r\n                lineTension: 1,\r\n                backgroundColor: \"\",\r\n                borderColor: \"red\",\r\n                borderWidth: 2,\r\n                data: deceasedCases,\r\n                pointRadius: 0,\r\n              },\r\n              //the graph lines are drawn here, with the standard labels and the colors for the lines\r\n              //no fill colors, borderwidth is set to a small value, except for confirmed cases which is 3.5 for it\r\n              //no points on the lines because it doesn't look good\r\n            ],\r\n          },\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isLoaded === false) {\r\n      return (\r\n        <div className=\"graph-container\">\r\n          <h1>Loading</h1>\r\n        </div>\r\n      );\r\n    } else\r\n      return (\r\n        <div className=\"graph-container\">\r\n          <Line\r\n            height={300}\r\n            data={this.state.graphData}\r\n            options={{\r\n              legend: {\r\n                labels: {\r\n                  fontColor: \"#eeeeee\",\r\n                  fontFamily: \"Fira Sans\",\r\n                },\r\n              },\r\n              title: {\r\n                display: true,\r\n                fontFamily: \"Fira Sans\",\r\n                text: `Cases in ${\r\n                  this.state.countryProv === undefined\r\n                    ? this.state.givenCountry.Country\r\n                    : this.state.countryProv.charAt(0).toUpperCase() +\r\n                      this.state.countryProv.slice(1)\r\n                }`,\r\n                //the located country is set or the selected country is set\r\n                fontColor: \"#eeeeee\",\r\n\r\n                fontSize: 20,\r\n              },\r\n              scales: {\r\n                yAxes: [\r\n                  {\r\n                    type: \"logarithmic\",\r\n                    ticks: {\r\n                      min: 0,\r\n                      max: 1000000,\r\n                      callback: function (value, index, values) {\r\n                        if (value === 1000000) return \"1M\";\r\n                        if (value === 100000) return \"100K\";\r\n                        if (value === 10000) return \"10K\";\r\n                        if (value === 1000) return \"1K\";\r\n                        if (value === 100) return \"100\";\r\n                        if (value === 10) return \"10\";\r\n                        if (value === 0) return \"0\";\r\n                        return null;\r\n                        //y axis value ticks for log graph type\r\n                      },\r\n                    },\r\n                  },\r\n                ],\r\n              },\r\n            }}\r\n          />\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\n//the sizing of the graph component is a bit tough to understand and implement for both mobiles and desktops\r\n\r\nexport default Graph;\r\n","import React, { Component } from \"react\";\r\nimport CountryTrio from \"./CountryTrio\";\r\nimport Graph from \"./Graph\";\r\n//graph is used here, to show the selected country\r\n\r\nclass Dropdown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      countryList: props.data,\r\n      //the countryList for the names of the countries\r\n      continent: null,\r\n      //the selected country's continent\r\n      population: null,\r\n      //the selected country's population\r\n      subregion: null,\r\n      //the selected country's subregion\r\n      language: null,\r\n      //the selected country's language\r\n      selectedCountry: null,\r\n      //the country selected from the dropdown\r\n    };\r\n    this.handleCountryChange = this.handleCountryChange.bind(this);\r\n    //just a binder\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.state.countryList.sort((a, b) => {\r\n      if (a.Country > b.Country) {\r\n        return 1;\r\n      } else return -1;\r\n    });\r\n  }\r\n  //this wouldn't need to be here, but it need to because of a bug which I couldn't remove\r\n  //the first time the page loads, the dropdown is in a alphabetic order\r\n  //the user can normally select the country they require\r\n  //but if the user wants to select a different country,\r\n  //the dropdown contents are sorted based on the confirmed count of countries\r\n  //to counter this, if the countryList is sorted abnormally, this sorts it alphabetically\r\n  //it's a hack, but I can't trace the bug for now.\r\n\r\n  handleCountryChange(event) {\r\n    const { value } = event.target;\r\n    //if the user selects a country, the event is triggered,\r\n    //the event value is extracted\r\n    if (value === \"no-select\") {\r\n      //if the value is just a unselect, it sets all states to null, and then removes the graph and countryTrio\r\n      this.setState({\r\n        continent: null,\r\n        population: null,\r\n        subregion: null,\r\n        selectedCountry: null,\r\n        language: null,\r\n      });\r\n    } else {\r\n      //if the country is a different selected country, then the value of the new select is taken\r\n      //the value is a slug of the country\r\n      //it's used to get the details of the country\r\n      let selectedCountry = this.state.countryList.filter((country) => {\r\n        if (country.Slug === value) {\r\n          return country;\r\n        }\r\n      });\r\n      selectedCountry = selectedCountry[0];\r\n      //as I said, it returns a single element array xD\r\n      fetch(\r\n        `https://restcountries.eu/rest/v2/alpha/${selectedCountry.CountryCode}`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((resJSON) => {\r\n          //this fetches the selected country's details from an api\r\n          this.setState({\r\n            continent: resJSON.region,\r\n            population: resJSON.population,\r\n            subregion: resJSON.subregion,\r\n            language: resJSON.languages[0].name,\r\n            selectedCountry: selectedCountry,\r\n          });\r\n        });\r\n      //details are set here\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"country-list\">\r\n        <select\r\n          className=\"country-dropdown\"\r\n          onChange={(event) => this.handleCountryChange(event)}\r\n        >\r\n          <option value=\"no-select\">Select Country</option>\r\n          {/* this is valued as no-select to allow the user to unselect their country choice */}\r\n          {this.state.countryList.map((country) => (\r\n            <option key={country.CountryCode} value={country.Slug}>\r\n              {country.Country}\r\n            </option>\r\n          ))}\r\n          {/* the country names are mapped to a option tag and then fed here as an array in the select tag */}\r\n        </select>\r\n        {this.state.selectedCountry != null ? (\r\n          <div className=\"selected-country-div\">\r\n            <CountryTrio\r\n              country={this.state.selectedCountry}\r\n              continent={this.state.continent}\r\n              population={this.state.population}\r\n              subregion={this.state.subregion}\r\n              language={this.state.language}\r\n            />\r\n            {/* a countryTrio is set here with the selected country props */}\r\n            <Graph givenCountry={this.state.selectedCountry} />\r\n            {/* the graph for the selected country is set here */}\r\n          </div>\r\n        ) : null}\r\n        <h3>\r\n          {this.state.selectedCountry == null\r\n            ? \"Select a country to view it's stats\"\r\n            : \"\"}\r\n        </h3>\r\n      </div>\r\n      // if there's no country selected, then it has a text saying the user to use the dropdown\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dropdown;\r\n","import React, { Component } from \"react\";\r\n\r\n//it's named Top16Countries because I didn't find India in the top 15 list, it was the 16th place when I coded this\r\n//now when I'm commenting this, it's at 9th place, right behind Germany.\r\n//things are getting worse here, but the govt and the people just don't care\r\n//they are even talking about unlocking the country\r\n// :(\r\n\r\nclass Top16Countries extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      countryList: props.data,\r\n      //the countries obj from the props\r\n      top16Countries: null,\r\n      //the top countries is set to null, because we don't know them initially\r\n      detectedCountry: props.country,\r\n      //the current location of the user\r\n    };\r\n    this.calcTop16Countries = this.calcTop16Countries.bind(this);\r\n    //just a binder\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.calcTop16Countries();\r\n    //when component is on page, calculate the top countries\r\n  }\r\n\r\n  calcTop16Countries() {\r\n    let orderedCountries = this.state.countryList;\r\n    //this is just a variable to house the countryList state\r\n    orderedCountries.sort((a, b) => {\r\n      if (a.TotalConfirmed > b.TotalConfirmed) {\r\n        return -1;\r\n      } else return 1;\r\n    });\r\n    //sorts the countryList based on the totalConfirmed values of the country\r\n    const top16Countries = orderedCountries.slice(0, 16);\r\n    //takes the first 16 countries from the sorted array\r\n    top16Countries.map((country) => {\r\n      switch (country.Country) {\r\n        case \"Iran, Islamic Republic of\":\r\n          country.Country = \"Iran\";\r\n          break;\r\n        case \"United States of America\":\r\n          country.Country = \"USA\";\r\n          break;\r\n        case \"Holy See (Vatican City State)\":\r\n          country.Country = \"Vatican City\";\r\n          break;\r\n        case \"Macedonia, Republic of\":\r\n          country.Country = \"Macedonia\";\r\n          break;\r\n        case \"Taiwan, Republic of China\":\r\n          country.Country = \"Taiwan\";\r\n          break;\r\n        case \"Tanzania, United Republic of\":\r\n          country.Country = \"Tanzania\";\r\n          break;\r\n        case \"Venezuela (Bolivarian Republic)\":\r\n          country.Country = \"Venezuela\";\r\n          break;\r\n      }\r\n      return country;\r\n    });\r\n    //this is just a formatting code\r\n    //the api returns a country with a typo, or with a really long country name\r\n    //so we use this to just rename those countries\r\n    //not required, but it's just for better readability\r\n    this.state.countryList.map((country) => {\r\n      switch (country.Country) {\r\n        case \"Iran, Islamic Republic of\":\r\n          country.Country = \"Iran\";\r\n          break;\r\n        case \"United States of America\":\r\n          country.Country = \"USA\";\r\n          break;\r\n        case \"Holy See (Vatican City State)\":\r\n          country.Country = \"Vatican City\";\r\n          break;\r\n        case \"Macedonia, Republic of\":\r\n          country.Country = \"Macedonia\";\r\n          break;\r\n        case \"Taiwan, Republic of China\":\r\n          country.Country = \"Taiwan\";\r\n          break;\r\n        case \"Tanzania, United Republic of\":\r\n          country.Country = \"Tanzania\";\r\n          break;\r\n        case \"Venezuela (Bolivarian Republic)\":\r\n          country.Country = \"Venezuela\";\r\n          break;\r\n      }\r\n      return country;\r\n    });\r\n    //this is just a formatting code\r\n    //the api returns a country with a typo, or with a really long country name\r\n    //so we use this to just rename those countries\r\n    //not required, but it's just for better readability\r\n    this.setState({\r\n      top16Countries: top16Countries,\r\n      //sets the top countries\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.top16Countries == null) {\r\n      return <h1>Calculating...</h1>;\r\n      // if the countries are not yet decided for the top list\r\n    } else {\r\n      return (\r\n        <div className=\"top-16-countries-list\">\r\n          <h1>Top Countries Affected</h1>\r\n          {this.state.top16Countries.map((country) => {\r\n            return (\r\n              <ul key={country.Country}>\r\n                <div>\r\n                  <span className=\"country-name\">\r\n                    {this.state.detectedCountry === country.Slug ? `📍  ` : \"\"}\r\n                    {country.Country}\r\n                  </span>\r\n                  <span className=\"case-count\">\r\n                    {this.state.detectedCountry === country.Slug ? `👉   ` : \"\"}\r\n                    {country.TotalConfirmed} cases\r\n                  </span>\r\n                  {/* the emojis just show the user's current location, if their country is in the top list */}\r\n                </div>\r\n              </ul>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n//idk why I named this Top16Countries, this is bad way of naming components / variables\r\n\r\nexport default Top16Countries;\r\n","import React, { Component } from \"react\";\r\nimport SummaryTrio from \"./SummaryTrio\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport Top16Countries from \"./Top16Countries\";\r\nimport Graph from \"./Graph\";\r\n\r\nclass MainApp extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      globalSummary: null,\r\n      //global object from the json\r\n      SUMMARY_URL: \"https://api.covid19api.com/summary\",\r\n      //the summary url\r\n      countryList: null,\r\n      //extracted countryList from the json, has both the country name and the stats\r\n      isLoaded: false,\r\n      //initially set to false, is set to true when page is completely loaded\r\n      error: null,\r\n      //error encountered when fetching\r\n      countryProv: \"\",\r\n      //current country the user is located\r\n    };\r\n    this.fetchGlobalSummary = this.fetchGlobalSummary.bind(this);\r\n    this.locationFailed = this.locationFailed.bind(this);\r\n    this.setLocation = this.setLocation.bind(this);\r\n    //just binders so that these functions can change states\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchGlobalSummary();\r\n  }\r\n  //when first mounted, fetch the data\r\n\r\n  fetchGlobalSummary() {\r\n    fetch(this.state.SUMMARY_URL)\r\n      .then((res) => {\r\n        if (res.status >= 200 && res.status <= 299) {\r\n          return res.json();\r\n        } else {\r\n          throw Error(res.statusText);\r\n          //throws an error for us to catch it\r\n        }\r\n      })\r\n      .then((resJSON) => {\r\n        this.setState({\r\n          globalSummary: resJSON.Global,\r\n          countryList: resJSON.Countries,\r\n          //the global and countryList states are set here from the json\r\n        });\r\n        window.navigator.geolocation.getCurrentPosition(\r\n          this.setLocation, //position is passed here implicitly\r\n          this.locationFailed\r\n        );\r\n        //after setting the required states, the browser asks the user's location permission\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          error: err,\r\n        });\r\n      });\r\n    //if any error is thrown, this sets the error state\r\n  }\r\n\r\n  setLocation(position) {\r\n    const { latitude, longitude } = position.coords;\r\n    //extracting the lats and longs from the given position\r\n    fetch(\r\n      `https://api.opencagedata.com/geocode/v1/json?key=ceca709d7d3449c1a51ed2a6f62e7daf&q=${latitude}%2C+${longitude}&pretty=1&no_annotations=1`\r\n    )\r\n      //given coords are sent to the api and it returns a json\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        const code = res.results[0].components.country_code.toUpperCase();\r\n        //country's iso2 code is extracted\r\n        const slug = this.state.countryList.filter((country) => {\r\n          if (country.CountryCode === code) {\r\n            return country.Slug;\r\n          }\r\n        });\r\n        //from the country code returned from the api, the slug is found.\r\n        //the countryList is used to find the slug, then it's returned.\r\n        this.setState({\r\n          countryProv: slug[0].Slug,\r\n          //the weird thing is, the returned slug is in an array, with only the slug, and nothing else\r\n          //so we extract the slug and set it to countryProv, which is the current location of user\r\n          isLoaded: true,\r\n          //when everything is loaded\r\n        });\r\n      });\r\n  }\r\n\r\n  locationFailed() {\r\n    this.setState({\r\n      countryProv: \"india\",\r\n      isLoaded: true,\r\n    });\r\n  }\r\n  //if the user denies the location permission, the countryProv is set to INDIA by default\r\n  //because the majority of my userbase is from INDIA\r\n  //and it sets the loaded state to true, to load the page\r\n\r\n  render() {\r\n    if (!this.state.isLoaded) {\r\n      return (\r\n        <div className=\"main-panel\">\r\n          <h1>\r\n            {this.state.error != null\r\n              ? `🙄 ${this.state.error.message}. Try reloading.`\r\n              : \"LOADING\"}\r\n          </h1>\r\n          {/* if the page is not yet loaded, then it shows LOADING\r\n              if the page encounters an error, it's displayed here\r\n              if everything goes alright, this div vanishes and shows the main content */}\r\n        </div>\r\n      );\r\n    } else\r\n      return (\r\n        <div className=\"main-panel\">\r\n          <h3>\r\n            (You are in{\" \"}\r\n            {this.state.countryProv.charAt(0).toUpperCase() +\r\n              this.state.countryProv.slice(1)}\r\n            )\r\n            {/* the countryProv is all lowercase by default, this just capitalizes the first letter */}\r\n          </h3>\r\n          <div className=\"global-summary\">\r\n            <SummaryTrio data={this.state.globalSummary} />\r\n            {/* this is for the summary trio for global summary\r\n                takes in the global summary object */}\r\n            <Graph Country={this.state.countryProv} />\r\n            {/* the graph for current location\r\n                takes in just the countryProv (name) */}\r\n          </div>\r\n          <Top16Countries\r\n            data={this.state.countryList}\r\n            country={this.state.countryProv}\r\n          />\r\n          {/* here the countryList and the current country is passed,\r\n              in the list, the current country is shown with a pin,\r\n              the countryList is used to rank the top countries */}\r\n          <Dropdown data={this.state.countryList} />\r\n          {/* just takes in the countryList and then makes a dropdown from it */}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default MainApp;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Footer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"footer\">\r\n        <p className=\"main-subtitle\">\r\n          <a href=\"https://github.com/Suraj-Gov/covid-19-stats/tree/master\">\r\n            Link to the repo\r\n          </a>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//self explainatory footer component\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n// import \"./normalize.css\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport Header from \"./Header\";\r\nimport MainApp from \"./MainApp\";\r\nimport Footer from \"./Footer\";\r\n\r\nclass Main extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        <Header />\r\n        {/* the upper header element */}\r\n        <MainApp />\r\n        {/* the main guts of the webapp */}\r\n        <Footer />\r\n        {/* just a normal footer, linking to the repo */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<Main />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}