{"version":3,"sources":["Header.js","SummaryTrio.js","CountryTrio.js","Graph.js","Dropdown.js","Top16Countries.js","MainApp.js","Footer.js","index.js"],"names":["Header","state","className","Component","SummaryTrio","props","globalStats","data","this","TotalConfirmed","NewConfirmed","TotalRecovered","NewRecovered","TotalDeaths","NewDeaths","CountryTrio","country","continent","population","language","prevProps","prevState","setState","src","CountryCode","alt","Country","toFixed","Graph","countryProv","givenCountry","isLoaded","graphData","getCountryCaseStats","bind","fetch","undefined","Slug","then","res","json","resJSON","timeStamps","map","i","Date","parse","toString","slice","confirmedCases","Confirmed","activeCases","Active","recoveredCases","Recovered","deceasedCases","Deaths","labels","datasets","label","length","fill","lineTension","backgroundColor","borderColor","borderWidth","pointRadius","height","options","legend","fontColor","fontFamily","title","display","text","charAt","toUpperCase","fontSize","scales","yAxes","type","ticks","min","max","callback","value","index","values","Dropdown","countryList","subregion","selectedCountry","handleCountryChange","sort","a","b","event","target","filter","console","log","region","languages","name","onChange","key","Top16Countries","top16Countries","detectedCountry","calcTop16Countries","orderedCountries","MainApp","globalSummary","SUMMARY_URL","error","fetchGlobalSummary","locationFailed","setLocation","status","Error","statusText","Global","Countries","window","navigator","geolocation","getCurrentPosition","catch","err","position","coords","latitude","longitude","code","results","components","country_code","slug","message","Footer","href","Main","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a20cc7d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"top-header\">\r\n        <h1 className=\"main-heading\">COVID-19 Stats</h1>\r\n        <h4 className=\"main-subtitle\">\r\n          {/* A stats webapp that&#39;s updated automatically */}\r\n          Realtime Stats\r\n        </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass SummaryTrio extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      globalStats: props.data,\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"summary-trio\">\r\n        <div className=\"confirmed\">\r\n          <p className=\"heading\">Confirmed</p>\r\n          <p className=\"total\">{this.state.globalStats.TotalConfirmed}</p>\r\n          <p className=\"new\">\r\n            <span className=\"plus\">TODAY</span>\r\n            {this.state.globalStats.NewConfirmed}\r\n          </p>\r\n        </div>\r\n        <div className=\"recovered\">\r\n          <p className=\"heading\">Recovered</p>\r\n          <p className=\"total\">{this.state.globalStats.TotalRecovered}</p>\r\n          <p className=\"new\">\r\n            <span className=\"plus\">TODAY</span>\r\n            {this.state.globalStats.NewRecovered}\r\n          </p>\r\n        </div>\r\n        <div className=\"deceased\">\r\n          <p className=\"heading\">Deceased</p>\r\n          <p className=\"total\">{this.state.globalStats.TotalDeaths}</p>\r\n          <p className=\"new\">\r\n            <span className=\"plus\">TODAY</span>\r\n            {this.state.globalStats.NewDeaths}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SummaryTrio;\r\n","import React, { Component } from \"react\";\r\n\r\nclass CountryTrio extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      country: props.country,\r\n      continent: props.continent,\r\n      population: props.population,\r\n      language: props.language,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.country !== this.props.country) {\r\n      this.setState({\r\n        country: this.props.country,\r\n        continent: this.props.continent,\r\n        population: this.props.population,\r\n        language: this.props.language,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // if (this.state.country == null || this.state.isLoaded == false) {\r\n    //   return <h3>Select a country to get it's summary</h3>;\r\n    // } else {\r\n    return (\r\n      <div className=\"country-trio\">\r\n        <div className=\"country-details\">\r\n          <div className=\"image-container\">\r\n            <img\r\n              src={\r\n                \"https://www.countryflags.io/\" +\r\n                this.state.country.CountryCode +\r\n                \"/flat/64.png\"\r\n              }\r\n              alt={this.state.country.Country}\r\n            />\r\n          </div>\r\n          <p className=\"name\">{this.state.country.Country}</p>\r\n          <p className=\"continent\">{this.state.continent}</p>\r\n          <p className=\"language\">Language: {this.state.language}</p>\r\n          <p className=\"population\">Population: {this.state.population}</p>\r\n          <p className=\"affected\">\r\n            Affected Population:\r\n            {(\r\n              (this.state.country.TotalConfirmed / this.state.population) *\r\n              100\r\n            ).toFixed(3)}\r\n            %\r\n          </p>\r\n        </div>\r\n        <div className=\"country-specific-stats\">\r\n          <div className=\"confirmed\">\r\n            <p className=\"heading\">Confirmed</p>\r\n            <p className=\"total\">{this.state.country.TotalConfirmed}</p>\r\n            <p className=\"new\">\r\n              <span className=\"plus\">TODAY</span>\r\n              {this.state.country.NewConfirmed}\r\n            </p>\r\n          </div>\r\n          <div className=\"recovered\">\r\n            <p className=\"heading\">Recovered</p>\r\n            <p className=\"total\">{this.state.country.TotalRecovered}</p>\r\n            <p className=\"new\">\r\n              <span className=\"plus\">TODAY</span>\r\n              {this.state.country.NewRecovered}\r\n            </p>\r\n          </div>\r\n          <div className=\"deceased\">\r\n            <p className=\"heading\">Deceased</p>\r\n            <p className=\"total\">{this.state.country.TotalDeaths}</p>\r\n            <p className=\"new\">\r\n              <span className=\"plus\">TODAY</span>\r\n              {this.state.country.NewDeaths}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountryTrio;\r\n","import React, { Component } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nclass Graph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      countryProv: props.Country,\r\n      givenCountry: props.givenCountry,\r\n      isLoaded: false,\r\n      graphData: {},\r\n    };\r\n\r\n    this.getCountryCaseStats = this.getCountryCaseStats.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getCountryCaseStats();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.givenCountry !== this.props.givenCountry) {\r\n      this.setState({\r\n        givenCountry: this.props.givenCountry,\r\n        isLoaded: false,\r\n        graphData: {},\r\n      });\r\n      this.getCountryCaseStats();\r\n    }\r\n  }\r\n\r\n  getCountryCaseStats() {\r\n    // console.log(\r\n    //   `https://api.covid19api.com/dayone/country/${\r\n    //     this.state.countryProv === undefined\r\n    //       ? this.state.givenCountry.Slug\r\n    //       : this.state.countryProv\r\n    //   }`\r\n    // );\r\n\r\n    fetch(\r\n      `https://api.covid19api.com/dayone/country/${\r\n        this.state.countryProv === undefined\r\n          ? this.state.givenCountry.Slug\r\n          : this.state.countryProv\r\n      }`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((resJSON) => {\r\n        const timeStamps = resJSON.map((i) => {\r\n          let iDate = new Date(Date.parse(i.Date)).toString();\r\n          return iDate.slice(4, 10);\r\n        });\r\n        const confirmedCases = resJSON.map((i) => {\r\n          return i.Confirmed;\r\n        });\r\n        const activeCases = resJSON.map((i) => {\r\n          return i.Active;\r\n        });\r\n        const recoveredCases = resJSON.map((i) => {\r\n          return i.Recovered;\r\n        });\r\n        const deceasedCases = resJSON.map((i) => {\r\n          return i.Deaths;\r\n        });\r\n        this.setState({\r\n          isLoaded: true,\r\n          graphData: {\r\n            labels: timeStamps,\r\n            datasets: [\r\n              {\r\n                label: `Confirmed Cases - ${\r\n                  confirmedCases[confirmedCases.length - 1]\r\n                }`,\r\n                fill: false,\r\n                lineTension: 1,\r\n                backgroundColor: \"\",\r\n                borderColor: \"white\",\r\n                borderWidth: 3.5,\r\n                data: confirmedCases,\r\n                pointRadius: 0,\r\n              },\r\n              {\r\n                label: `Active Cases - ${activeCases[activeCases.length - 1]}`,\r\n                fill: false,\r\n                lineTension: 1,\r\n                backgroundColor: \"\",\r\n                borderColor: \"yellow\",\r\n                borderWidth: 2,\r\n                data: activeCases,\r\n                pointRadius: 0,\r\n              },\r\n              {\r\n                label: `Recovered Cases - ${\r\n                  recoveredCases[recoveredCases.length - 1]\r\n                }`,\r\n                fill: false,\r\n                lineTension: 1,\r\n                backgroundColor: \"\",\r\n                borderColor: \"green\",\r\n                borderWidth: 2,\r\n                data: recoveredCases,\r\n                pointRadius: 0,\r\n              },\r\n              {\r\n                label: `Deceased Cases - ${\r\n                  deceasedCases[deceasedCases.length - 1]\r\n                }`,\r\n                fill: false,\r\n                lineTension: 1,\r\n                backgroundColor: \"\",\r\n                borderColor: \"red\",\r\n                borderWidth: 2,\r\n                data: deceasedCases,\r\n                pointRadius: 0,\r\n              },\r\n            ],\r\n          },\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isLoaded === false) {\r\n      return (\r\n        <div className=\"graph-container\">\r\n          <h1>Loading</h1>\r\n        </div>\r\n      );\r\n    } else\r\n      return (\r\n        <div className=\"graph-container\">\r\n          <Line\r\n            height={300}\r\n            data={this.state.graphData}\r\n            options={{\r\n              legend: {\r\n                labels: {\r\n                  fontColor: \"#eeeeee\",\r\n                  fontFamily: \"Fira Sans\",\r\n                },\r\n              },\r\n              title: {\r\n                display: true,\r\n                fontFamily: \"Fira Sans\",\r\n                text: `Cases in ${\r\n                  this.state.countryProv === undefined\r\n                    ? this.state.givenCountry.Country\r\n                    : this.state.countryProv.charAt(0).toUpperCase() +\r\n                      this.state.countryProv.slice(1)\r\n                }`,\r\n                fontColor: \"#eeeeee\",\r\n\r\n                fontSize: 20,\r\n              },\r\n              scales: {\r\n                yAxes: [\r\n                  {\r\n                    type: \"logarithmic\",\r\n                    ticks: {\r\n                      min: 0,\r\n                      max: 1000000,\r\n                      callback: function (value, index, values) {\r\n                        if (value === 1000000) return \"1M\";\r\n                        if (value === 100000) return \"100K\";\r\n                        if (value === 10000) return \"10K\";\r\n                        if (value === 1000) return \"1K\";\r\n                        if (value === 100) return \"100\";\r\n                        if (value === 10) return \"10\";\r\n                        if (value === 0) return \"0\";\r\n                        return null;\r\n                      },\r\n                    },\r\n                  },\r\n                ],\r\n              },\r\n            }}\r\n          />\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","import React, { Component } from \"react\";\r\nimport CountryTrio from \"./CountryTrio\";\r\nimport Graph from \"./Graph\";\r\n\r\nclass Dropdown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      countryList: props.data,\r\n      continent: null,\r\n      population: null,\r\n      subregion: null,\r\n      language: null,\r\n      selectedCountry: null,\r\n    };\r\n    this.handleCountryChange = this.handleCountryChange.bind(this);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.state.countryList.sort((a, b) => {\r\n      if (a.Country > b.Country) {\r\n        return 1;\r\n      } else return -1;\r\n    });\r\n  }\r\n\r\n  handleCountryChange(event) {\r\n    const { value } = event.target;\r\n    if (value === \"no-select\") {\r\n      this.setState({\r\n        continent: null,\r\n        population: null,\r\n        subregion: null,\r\n        selectedCountry: null,\r\n        language: null,\r\n      });\r\n    } else {\r\n      let selectedCountry = this.state.countryList.filter((country) => {\r\n        if (country.Slug === value) {\r\n          return country;\r\n        }\r\n      });\r\n      selectedCountry = selectedCountry[0];\r\n      fetch(\r\n        `https://restcountries.eu/rest/v2/alpha/${selectedCountry.CountryCode}`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((resJSON) => {\r\n          console.log();\r\n          this.setState({\r\n            continent: resJSON.region,\r\n            population: resJSON.population,\r\n            subregion: resJSON.subregion,\r\n            language: resJSON.languages[0].name,\r\n            selectedCountry: selectedCountry,\r\n          });\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"country-list\">\r\n        <select\r\n          className=\"country-dropdown\"\r\n          onChange={(event) => this.handleCountryChange(event)}\r\n        >\r\n          <option value=\"no-select\">Select Country</option>\r\n          {this.state.countryList.map((country) => (\r\n            <option key={country.CountryCode} value={country.Slug}>\r\n              {country.Country}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        {this.state.selectedCountry != null ? (\r\n          <div className=\"selected-country-div\">\r\n            <CountryTrio\r\n              country={this.state.selectedCountry}\r\n              continent={this.state.continent}\r\n              population={this.state.population}\r\n              subregion={this.state.subregion}\r\n              language={this.state.language}\r\n            />\r\n            <Graph givenCountry={this.state.selectedCountry} />\r\n          </div>\r\n        ) : null}\r\n        <h3>\r\n          {this.state.selectedCountry == null\r\n            ? \"Select a country to view it's stats\"\r\n            : \"\"}\r\n        </h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dropdown;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Top16Countries extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      countryList: props.data,\r\n      top16Countries: null,\r\n      detectedCountry: props.country,\r\n    };\r\n    this.calcTop16Countries = this.calcTop16Countries.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.calcTop16Countries();\r\n  }\r\n\r\n  calcTop16Countries() {\r\n    let orderedCountries = this.state.countryList;\r\n    orderedCountries.sort((a, b) => {\r\n      if (a.TotalConfirmed > b.TotalConfirmed) {\r\n        return -1;\r\n      } else return 1;\r\n    });\r\n    const top16Countries = orderedCountries.slice(0, 16);\r\n    top16Countries.map((country) => {\r\n      switch (country.Country) {\r\n        case \"Iran, Islamic Republic of\":\r\n          country.Country = \"Iran\";\r\n          break;\r\n        case \"United States of America\":\r\n          country.Country = \"USA\";\r\n          break;\r\n        case \"Holy See (Vatican City State)\":\r\n          country.Country = \"Vatican City\";\r\n          break;\r\n        case \"Macedonia, Republic of\":\r\n          country.Country = \"Macedonia\";\r\n          break;\r\n        case \"Taiwan, Republic of China\":\r\n          country.Country = \"Taiwan\";\r\n          break;\r\n        case \"Tanzania, United Republic of\":\r\n          country.Country = \"Tanzania\";\r\n          break;\r\n        case \"Venezuela (Bolivarian Republic)\":\r\n          country.Country = \"Venezuela\";\r\n          break;\r\n      }\r\n      return country;\r\n    });\r\n    this.state.countryList.map((country) => {\r\n      switch (country.Country) {\r\n        case \"Iran, Islamic Republic of\":\r\n          country.Country = \"Iran\";\r\n          break;\r\n        case \"United States of America\":\r\n          country.Country = \"USA\";\r\n          break;\r\n        case \"Holy See (Vatican City State)\":\r\n          country.Country = \"Vatican City\";\r\n          break;\r\n        case \"Macedonia, Republic of\":\r\n          country.Country = \"Macedonia\";\r\n          break;\r\n        case \"Taiwan, Republic of China\":\r\n          country.Country = \"Taiwan\";\r\n          break;\r\n        case \"Tanzania, United Republic of\":\r\n          country.Country = \"Tanzania\";\r\n          break;\r\n        case \"Venezuela (Bolivarian Republic)\":\r\n          country.Country = \"Venezuela\";\r\n          break;\r\n      }\r\n      return country;\r\n    });\r\n    this.setState({\r\n      top16Countries: top16Countries,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.top16Countries == null) {\r\n      return <h1>Calculating...</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"top-16-countries-list\">\r\n          <h1>Top Countries Affected</h1>\r\n          {this.state.top16Countries.map((country) => {\r\n            return (\r\n              <ul key={country.Country}>\r\n                <div>\r\n                  <span className=\"country-name\">\r\n                    {this.state.detectedCountry === country.Slug ? `📍  ` : \"\"}\r\n                    {country.Country}\r\n                  </span>\r\n                  <span className=\"case-count\">\r\n                    {this.state.detectedCountry === country.Slug ? `👉   ` : \"\"}\r\n                    {country.TotalConfirmed} cases\r\n                  </span>\r\n                </div>\r\n              </ul>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Top16Countries;\r\n","import React, { Component } from \"react\";\r\nimport SummaryTrio from \"./SummaryTrio\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport Top16Countries from \"./Top16Countries\";\r\nimport Graph from \"./Graph\";\r\n\r\nclass MainApp extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      globalSummary: null,\r\n      SUMMARY_URL: \"https://api.covid19api.com/summary\",\r\n      countryList: null,\r\n      isLoaded: false,\r\n      error: null,\r\n      countryProv: \"\",\r\n    };\r\n    this.fetchGlobalSummary = this.fetchGlobalSummary.bind(this);\r\n    this.locationFailed = this.locationFailed.bind(this);\r\n    this.setLocation = this.setLocation.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchGlobalSummary();\r\n  }\r\n\r\n  fetchGlobalSummary() {\r\n    fetch(this.state.SUMMARY_URL)\r\n      .then((res) => {\r\n        if (res.status >= 200 && res.status <= 299) {\r\n          return res.json();\r\n        } else {\r\n          throw Error(res.statusText);\r\n        }\r\n      })\r\n      .then((resJSON) => {\r\n        this.setState({\r\n          globalSummary: resJSON.Global,\r\n          countryList: resJSON.Countries,\r\n        });\r\n        window.navigator.geolocation.getCurrentPosition(\r\n          this.setLocation,\r\n          this.locationFailed\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          error: err,\r\n        });\r\n      });\r\n  }\r\n\r\n  setLocation(position) {\r\n    const { latitude, longitude } = position.coords;\r\n    fetch(\r\n      `https://api.opencagedata.com/geocode/v1/json?key=ceca709d7d3449c1a51ed2a6f62e7daf&q=${latitude}%2C+${longitude}&pretty=1&no_annotations=1`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        const code = res.results[0].components.country_code.toUpperCase();\r\n        const slug = this.state.countryList.filter((country) => {\r\n          if (country.CountryCode === code) {\r\n            return country.Slug;\r\n          }\r\n        });\r\n        this.setState({\r\n          countryProv: slug[0].Slug,\r\n          isLoaded: true,\r\n        });\r\n      });\r\n  }\r\n\r\n  locationFailed() {\r\n    this.setState({\r\n      countryProv: \"india\",\r\n      isLoaded: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.isLoaded) {\r\n      return (\r\n        <div className=\"main-panel\">\r\n          <h1>\r\n            {this.state.error != null\r\n              ? `🙄 ${this.state.error.message}. Try reloading.`\r\n              : \"LOADING\"}\r\n          </h1>\r\n        </div>\r\n      );\r\n    } else\r\n      return (\r\n        <div className=\"main-panel\">\r\n          <h3>\r\n            (You are in{\" \"}\r\n            {this.state.countryProv.charAt(0).toUpperCase() +\r\n              this.state.countryProv.slice(1)}\r\n            )\r\n          </h3>\r\n          <div className=\"global-summary\">\r\n            <SummaryTrio data={this.state.globalSummary} />\r\n            <Graph Country={this.state.countryProv} />\r\n          </div>\r\n          <Top16Countries\r\n            data={this.state.countryList}\r\n            country={this.state.countryProv}\r\n          />\r\n          <Dropdown data={this.state.countryList} />\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default MainApp;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Footer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"footer\">\r\n        <p className=\"main-subtitle\">\r\n          <a href=\"https://github.com/Suraj-Gov/covid-19-stats/tree/master\">\r\n            Link to the repo\r\n          </a>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n// import \"./normalize.css\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport Header from \"./Header\";\r\nimport MainApp from \"./MainApp\";\r\nimport Footer from \"./Footer\";\r\n\r\nclass Main extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        <Header />\r\n        <MainApp />\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<Main />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}